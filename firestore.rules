/**
 * @fileoverview Firestore Security Rules for SpendWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, where {userId} corresponds to the
 * Firebase Auth UID.  This includes profile information, expenses, categories,
 * budgets, wishlist items, IOUs, income, e-wallets and achievements.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All data is private and requires authentication.
 * - Data consistency between the path and document fields (userId) is enforced
 *   on creation and immutability is enforced on updates to prevent
 *   privilege escalation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Only the user can read their own profile. The user can only create their own profile
     * @path /users/{userId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own profile.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own profile.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s profile.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s profile.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s profile
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s profile
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own expense.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own expenses.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own expense.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s expense.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s expenses.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s expense.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s expense
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s expense
     * @principle Enforces document ownership for all operations on expenses.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own category.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own categories.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own category.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s category.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s categories.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s category.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s category
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s category
     * @principle Enforces document ownership for all operations on categories.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own budget.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own budgets.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own budget.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s budget.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s budgets.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s budget.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s budget
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s budget
     * @principle Enforces document ownership for all operations on budgets.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own wishlist items.
     * @path /users/{userId}/wishlist/{wishlistId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own wishlist item.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own wishlist items.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own wishlist item.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wishlist item.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wishlist items.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wishlist item.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wishlist item
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wishlist item
     * @principle Enforces document ownership for all operations on wishlist items.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own IOUs.
     * @path /users/{userId}/ious/{iouId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own iou.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own ious.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own iou.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s iou.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s ious.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s iou.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s iou
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s iou
     * @principle Enforces document ownership for all operations on IOUs.
     */
    match /users/{userId}/ious/{iouId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own income.
     * @path /users/{userId}/income/{incomeId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own income.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own income.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own income.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s income.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s income.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s income.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s income
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s income
     * @principle Enforces document ownership for all operations on income.
     */
    match /users/{userId}/income/{incomeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own wallet.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own wallets.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own wallet.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wallet.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wallets.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wallet.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wallet
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s wallet
     * @principle Enforces document ownership for all operations on e-wallets.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Only the user can read/write their own achievements.
     * @path /users/{userId}/achievements/{achievementId}
     * @allow (get) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can read their own achievement.
     * @allow (list) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can list their own achievements.
     * @allow (create) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' can create their own achievement.
     * @deny (get) User with UID 'anotherUser' cannot read user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s achievement.
     * @deny (list) User with UID 'anotherUser' cannot list user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s achievements.
     * @deny (create) User with UID 'anotherUser' cannot create user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s achievement.
     * @deny (update) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot update user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s achievement
     * @deny (delete) User with UID 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1' cannot delete user 'bwjF0OaFxeS9L9U9RW9yQvuvaAn1''s achievement
     * @principle Enforces document ownership for all operations on achievements.
     */
    match /users/{userId}/achievements/{achievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}