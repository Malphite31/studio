/**
 * @fileoverview Firestore Security Rules for SpendWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has complete control over their own data, and no access to other users' data.
 *
 * Data Structure:
 * The data is organized hierarchically under the `/users/{userId}` collection, where `{userId}` corresponds to the Firebase Auth UID.
 * User profiles are stored directly in the `/users/{userId}` document.
 * Expenses, categories, and budgets are stored as subcollections under each user's document:
 * - `/users/{userId}/expenses/{expenseId}`
 * - `/users/{userId}/categories/{categoryId}`
 * - `/users/{userId}/budgets/{budgetId}`
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing other users is disallowed.
 * - Data validation is relaxed to allow for rapid prototyping but critical authorization fields are validated.
 * - All write operations require an authenticated user.
 *
 * Denormalization for Authorization:
 * The `userId` field within Expense, Category, and Budget documents is used for authorization checks, ensuring that the data belongs to the user specified in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the `/users/{userId}` document, ensuring only the owner can read and write.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile document at /users/user_abc with matching id.
     * @allow (get, update, delete) User with UID 'user_abc' can read and modify their own profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read or modify the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the `/users/{userId}/expenses/{expenseId}` document, ensuring only the owner can read and write.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with UID 'user_abc' can create an expense document under their profile at /users/user_abc/expenses/expense_123 with userId: 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, list, and modify their own expense at /users/user_abc/expenses/expense_123.
     * @deny (create) User with UID 'user_xyz' cannot create an expense document under /users/user_abc/expenses/expense_123.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read or modify the expense at /users/user_abc/expenses/expense_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the `/users/{userId}/categories/{categoryId}` document, ensuring only the owner can read and write.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with UID 'user_abc' can create a category document under their profile at /users/user_abc/categories/category_123 with userId: 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, list, and modify their own category at /users/user_abc/categories/category_123.
     * @deny (create) User with UID 'user_xyz' cannot create a category document under /users/user_abc/categories/category_123.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read or modify the category at /users/user_abc/categories/category_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the `/users/{userId}/budgets/{budgetId}` document, ensuring only the owner can read and write.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with UID 'user_abc' can create a budget document under their profile at /users/user_abc/budgets/budget_123 with userId: 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, list, and modify their own budget at /users/user_abc/budgets/budget_123.
     * @deny (create) User with UID 'user_xyz' cannot create a budget document under /users/user_abc/budgets/budget_123.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read or modify the budget at /users/user_abc/budgets/budget_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}