/**
 * @fileoverview Firestore Security Rules for SpendWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only
 * access their own data.  No cross-user access is permitted except
 * where explicitly specified.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for
 * expenses, categories, budgets, wishlist items, IOUs, income, e-wallets, and achievements.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require a valid, authenticated user.
 * - Only the authenticated user can create, update, or delete resources under their own user ID.
 * - We are not validating the data shape in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Each document within a user's subcollections should contain a `userId` field
 *   that matches the `userId` in the path. This is enforced during creation
 *   and immutably maintained during updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching user ID.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own profile with matching user ID.
     * @deny (create) - Unauthenticated user tries to create a profile.
     * @deny (get, update, delete) - Authenticated user tries to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for expense documents.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - Authenticated user creates an expense under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own expenses under their user ID.
     * @deny (create) - Unauthenticated user tries to create an expense.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's expenses.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for category documents.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) - Authenticated user creates a category under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own categories under their user ID.
     * @deny (create) - Unauthenticated user tries to create a category.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's categories.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for budget documents.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - Authenticated user creates a budget under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own budgets under their user ID.
     * @deny (create) - Unauthenticated user tries to create a budget.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's budgets.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for wishlist documents.
     * @path /users/{userId}/wishlist/{wishlistId}
     * @allow (create) - Authenticated user creates a wishlist item under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own wishlist items under their user ID.
     * @deny (create) - Unauthenticated user tries to create a wishlist item.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's wishlist items.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for iou documents.
     * @path /users/{userId}/ious/{iouId}
     * @allow (create) - Authenticated user creates an IOU under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own IOUs under their user ID.
     * @deny (create) - Unauthenticated user tries to create an IOU.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's IOUs.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ious/{iouId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for income documents.
     * @path /users/{userId}/income/{incomeId}
     * @allow (create) - Authenticated user creates an income entry under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own income entries under their user ID.
     * @deny (create) - Unauthenticated user tries to create an income entry.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's income entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/income/{incomeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for ewallet documents.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) - Authenticated user creates an ewallet under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own ewallets under their user ID.
     * @deny (create) - Unauthenticated user tries to create an ewallet.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's ewallets.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for achievement documents.
     * @path /users/{userId}/achievements/{achievementId}
     * @allow (create) - Authenticated user creates an achievement under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user reads/lists/updates/deletes their own achievements under their user ID.
     * @deny (create) - Unauthenticated user tries to create an achievement.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's achievements.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/achievements/{achievementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}