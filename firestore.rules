/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the SpendWise application.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, where {userId} corresponds to the Firebase Auth UID.
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data for a specific user.
 * - /users/{userId}/categories/{categoryId}: Stores expense categories created by a specific user.
 * - /users/{userId}/budgets/{budgetId}: Stores budget information for a specific user.
 * - /users/{userId}/wishlist/{wishlistId}: Stores wishlist items for a specific user.
 * - /users/{userId}/ious/{iouId}: Stores IOUs for a specific user.
 * - /users/{userId}/income/{incomeId}: Stores income data for a specific user.
 *
 * Key Security Decisions:
 * - User profiles can only be created by the user themselves (self-creation).
 * - All subcollections under /users/{userId} are strictly owned by that user.
 * - Users cannot list other users' data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID "user123" can create a profile with id: "user123".
     * @deny (create) User with UID "user123" cannot create a profile with id: "otherUser".
     * @allow (get) User with UID "user123" can read their own profile.
     * @deny (get) User with UID "user123" cannot read the profile of user "otherUser".
     * @allow (update) User with UID "user123" can update their own profile.
     * @deny (update) User with UID "user123" cannot update the profile of user "otherUser".
     * @allow (delete) User with UID "user123" can delete their own profile.
     * @deny (delete) User with UID "user123" cannot delete the profile of user "otherUser".
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      // Allow the user to read their profile data.
      allow get: if isSignedIn() && isOwner(userId);
      // Allow the user to create their own profile, but only if the userId matches the authenticated user's ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Allow the user to update their own profile. Enforce immutability of the userId field.
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      // Allow the user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows users to read, create, update, and delete their own expense data.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with UID "user123" can create an expense under their user document.
     * @deny (create) User with UID "user123" cannot create an expense under another user's document.
     * @allow (get) User with UID "user123" can read their own expense.
     * @deny (get) User with UID "user123" cannot read an expense belonging to user "otherUser".
     * @allow (update) User with UID "user123" can update their own expense.
     * @deny (update) User with UID "user123" cannot update an expense belonging to user "otherUser".
     * @allow (delete) User with UID "user123" can delete their own expense.
     * @deny (delete) User with UID "user123" cannot delete an expense belonging to user "otherUser".
     * @principle Enforces document ownership for writes and reads within a user-scoped subcollection.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read, create, update, and delete their own category data.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with UID "user123" can create a category under their user document.
     * @deny (create) User with UID "user123" cannot create a category under another user's document.
     * @allow (get) User with UID "user123" can read their own category.
     * @deny (get) User with UID "user123" cannot read a category belonging to user "otherUser".
     * @allow (update) User with UID "user123" can update their own category.
     * @deny (update) User with UID "user123" cannot update a category belonging to user "otherUser".
     * @allow (delete) User with UID "user123" can delete their own category.
     * @deny (delete) User with UID "user123" cannot delete a category belonging to user "otherUser".
     * @principle Enforces document ownership for writes and reads within a user-scoped subcollection.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read, create, update, and delete their own budget data.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with UID "user123" can create a budget under their user document.
     * @deny (create) User with UID "user123" cannot create a budget under another user's document.
     * @allow (get) User with UID "user123" can read their own budget.
     * @deny (get) User with UID "user123" cannot read a budget belonging to user "otherUser".
     * @allow (update) User with UID "user123" can update their own budget.
     * @deny (update) User with UID "user123" cannot update a budget belonging to user "otherUser".
     * @allow (delete) User with UID "user123" can delete their own budget.
     * @deny (delete) User with UID "user123" cannot delete a budget belonging to user "otherUser".
     * @principle Enforces document ownership for writes and reads within a user-scoped subcollection.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read, create, update, and delete their own wishlist data.
     * @path /users/{userId}/wishlist/{wishlistId}
     * @allow (create) User with UID "user123" can create a wishlist item under their user document.
     * @deny (create) User with UID "user123" cannot create a wishlist item under another user's document.
     * @allow (get) User with UID "user123" can read their own wishlist item.
     * @deny (get) User with UID "user123" cannot read a wishlist item belonging to user "otherUser".
     * @allow (update) User with UID "user123" can update their own wishlist item.
     * @deny (update) User with UID "user123" cannot update a wishlist item belonging to user "otherUser".
     * @allow (delete) User with UID "user123" can delete their own wishlist item.
     * @deny (delete) User with UID "user123" cannot delete a wishlist item belonging to user "otherUser".
     * @principle Enforces document ownership for writes and reads within a user-scoped subcollection.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read, create, update, and delete their own IOU data.
     * @path /users/{userId}/ious/{iouId}
     * @allow (create) User with UID "user123" can create an IOU under their user document.
     * @deny (create) User with UID "user123" cannot create an IOU under another user's document.
     * @allow (get) User with UID "user123" can read their own IOU.
     * @deny (get) User with UID "user123" cannot read an IOU belonging to user "otherUser".
     * @allow (update) User with UID "user123" can update their own IOU.
     * @deny (update) User with UID "user123" cannot update an IOU belonging to user "otherUser".
     * @allow (delete) User with UID "user123" can delete their own IOU.
     * @deny (delete) User with UID "user123" cannot delete an IOU belonging to user "otherUser".
     * @principle Enforces document ownership for writes and reads within a user-scoped subcollection.
     */
    match /users/{userId}/ious/{iouId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read, create, update, and delete their own income data.
     * @path /users/{userId}/income/{incomeId}
     * @allow (create) User with UID "user123" can create an income entry under their user document.
     * @deny (create) User with UID "user123" cannot create an income entry under another user's document.
     * @allow (get) User with UID "user123" can read their own income entry.
     * @deny (get) User with UID "user123" cannot read an income entry belonging to user "otherUser".
     * @allow (update) User with UID "user123" can update their own income entry.
     * @deny (update) User with UID "user123" cannot update an income entry belonging to user "otherUser".
     * @allow (delete) User with UID "user123" can delete their own income entry.
     * @deny (delete) User with UID "user123" cannot delete an income entry belonging to user "otherUser".
     * @principle Enforces document ownership for writes and reads within a user-scoped subcollection.
     */
    match /users/{userId}/income/{incomeId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}