/**
 * @file Firestore Security Rules for SpendWise Application
 * @version Prototyping Mode - Data shape is not strictly validated.
 *
 * @description This ruleset enforces a strict user-ownership model, where each user
 * can only access and modify their own data. It prioritizes security and
 * assumes that all data is private unless explicitly specified otherwise.
 *
 * Data Structure:
 * - All data is nested under /users/{userId}, where {userId} corresponds to the
 *   Firebase Authentication UID.
 * - Each user has subcollections for expenses, categories, budgets, wishlist
 *   items, IOUs, income, e-wallets and achievements.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are restricted to the owner of the data.
 * - The rules explicitly deny any operation that is not explicitly allowed.
 *
 * Denormalization for Authorization:
 * - The rules rely on the Firebase Auth UID to identify the user and enforce
 *   ownership. The userId field within the documents is validated against the
 *   UID to ensure data consistency.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} path, ensuring that
 *   only the user can access it. Public data is not supported in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile information. Only the authenticated user can
     *              create their own profile. Updates are not allowed to prevent
     *              accidental modification.
     * @path /users/{userId}
     * @allow create if request.auth.uid == userId
     * @deny get if true
     * @deny list if true
     * @deny update if true
     * @deny delete if true
     * @principle Enforces user-ownership; prevents profile modification.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure expense data for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if isSignedIn() && isExistingOwner(userId)
     * @allow delete if isSignedIn() && isExistingOwner(userId)
     * @deny create if request.auth.uid != request.resource.data.userId
     * @deny update if request.resource.data.userId != resource.data.userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure expense categories created by a specific user.
     * @path /users/{userId}/categories/{categoryId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if isSignedIn() && isExistingOwner(userId)
     * @allow delete if isSignedIn() && isExistingOwner(userId)
     * @deny create if request.auth.uid != request.resource.data.userId
     * @deny update if request.resource.data.userId != resource.data.userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure budget information for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if isSignedIn() && isExistingOwner(userId)
     * @allow delete if isSignedIn() && isExistingOwner(userId)
     * @deny create if request.auth.uid != request.resource.data.userId
     * @deny update if request.resource.data.userId != resource.data.userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure wishlist items for a specific user.
     * @path /users/{userId}/wishlist/{wishlistId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if isSignedIn() && isExistingOwner(userId)
     * @allow delete if isSignedIn() && isExistingOwner(userId)
     * @deny create if request.auth.uid != request.resource.data.userId
     * @deny update if request.resource.data.userId != resource.data.userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure IOUs for a specific user.
     * @path /users/{userId}/ious/{iouId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if isSignedIn() && isExistingOwner(userId)
     * @allow delete if isSignedIn() && isExistingOwner(userId)
     * @deny create if request.auth.uid != request.resource.data.userId
     * @deny update if request.resource.data.userId != resource.data.userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/ious/{iouId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure income data for a specific user.
     * @path /users/{userId}/income/{incomeId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if isSignedIn() && isExistingOwner(userId)
     * @allow delete if isSignedIn() && isExistingOwner(userId)
     * @deny create if request.auth.uid != request.resource.data.userId
     * @deny update if request.resource.data.userId != resource.data.userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/income/{incomeId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure E-Wallet information for a specific user.
     * @path /users/{userId}/wallets/{walletId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if isSignedIn() && isExistingOwner(userId)
     * @allow delete if isSignedIn() && isExistingOwner(userId)
     * @deny create if request.auth.uid != request.resource.data.userId
     * @deny update if request.resource.data.userId != resource.data.userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure achievements unlocked by a specific user.
     * @path /users/{userId}/achievements/{achievementId}
     * @allow create if isSignedIn() && isOwner(userId)
     * @allow get if isSignedIn() && isOwner(userId)
     * @allow list if isSignedIn() && isOwner(userId)
     * @allow update if false;
     * @allow delete if false;
     * @deny create if request.auth.uid != userId
     * @principle Enforces document ownership for writes, validates userId on create.
     */
    match /users/{userId}/achievements/{achievementId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}