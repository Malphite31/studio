/**
 * @fileoverview Firestore Security Rules for SpendWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has full
 * control over their own data, and no access to other users' data.  Rules are
 * designed to prevent unauthorized data access or modification.
 *
 * Data Structure:
 * The Firestore database is structured with user-specific data nested under
 * `/users/{userId}`.  This structure allows for easy enforcement of
 * user-ownership. Each collection under the user id follows the same model
 *
 * Key Security Decisions:
 * - Users can only access data under their own user ID.
 * - Data validation is relaxed to allow for rapid prototyping, focusing on
 *   authorization rather than schema enforcement.
 * - List operations are restricted to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile access.
     * @path /users/{userId}
     * @allow (create) User with matching UID creates their profile.
     * @allow (get, update, delete) User with matching UID accesses their profile.
     * @deny (create, get, update, delete) User attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure expense data for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with matching UID creates an expense.
     * @allow (get, update, delete) User with matching UID accesses their expenses.
     * @deny (create, get, update, delete) User attempts to access another user's expenses.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure category data for a specific user.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with matching UID creates a category.
     * @allow (get, update, delete) User with matching UID accesses their categories.
     * @deny (create, get, update, delete) User attempts to access another user's categories.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure budget data for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with matching UID creates a budget.
     * @allow (get, update, delete) User with matching UID accesses their budgets.
     * @deny (create, get, update, delete) User attempts to access another user's budgets.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure wishlist data for a specific user.
     * @path /users/{userId}/wishlist/{wishlistId}
     * @allow (create) User with matching UID creates a wishlist item.
     * @allow (get, update, delete) User with matching UID accesses their wishlist items.
     * @deny (create, get, update, delete) User attempts to access another user's wishlist items.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure IOU data for a specific user.
     * @path /users/{userId}/ious/{iouId}
     * @allow (create) User with matching UID creates an IOU.
     * @allow (get, update, delete) User with matching UID accesses their IOUs.
     * @deny (create, get, update, delete) User attempts to access another user's IOUs.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ious/{iouId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure income data for a specific user.
     * @path /users/{userId}/income/{incomeId}
     * @allow (create) User with matching UID creates an income entry.
     * @allow (get, update, delete) User with matching UID accesses their income entries.
     * @deny (create, get, update, delete) User attempts to access another user's income entries.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/income/{incomeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure E-Wallet data for a specific user.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User with matching UID creates a wallet.
     * @allow (get, update, delete) User with matching UID accesses their wallets.
     * @deny (create, get, update, delete) User attempts to access another user's wallets.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}