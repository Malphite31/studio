/**
 * @fileoverview Firestore Security Rules for SpendWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has full
 * control over their own data (profile, expenses, categories, budgets, wishlist items, IOUs, income, and wallets).
 * No data is shared between users unless explicitly implemented through other mechanisms (not defined in the current data model).
 *
 * Data Structure:
 * The data is organized hierarchically under /users/{userId}, where {userId} corresponds
 * to the Firebase Authentication UID.  Each user has subcollections for their
 * expenses, categories, budgets, wishlist items, IOUs, income, and wallets.
 *
 * Key Security Decisions:
 * - Users can only access data under their own user ID.
 * - Listing of user profiles is disallowed.
 * - All write operations (create, update, delete) require the user to be the owner
 *   of the data.
 * - Data consistency between the path and document's internal userId field is enforced.
 *
 * Denormalization for Authorization:
 * - The 'userId' field is present in all documents within a user's subcollections
 *   (expenses, categories, etc.). This allows for efficient `isOwner()` checks without
 *   additional reads.
 *
 * Structural Segregation:
 * - There are no explicitly public collections. All data resides under the
 *   /users/{userId} path, indicating a private-by-default approach.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the root-level /users collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @deny (get, list, update, delete) All other operations are forbidden.
     * @principle Enforces user-ownership: only the user with the matching UID can create their profile.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user's E-Wallets.
     * @path /databases/{database}/documents/users/{userId}/wallets/{walletId}
     * @allow (create) User can create a wallet with a matching userId.
     * @allow (get, list) User can read their own wallets.
     * @allow (update, delete) User can update/delete their own existing wallets.
     * @deny All operations from other users.
     * @principle Enforces user-ownership and relational integrity.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's Expenses.
     * @path /databases/{database}/documents/users/{userId}/expenses/{expenseId}
     * @allow (create) User can create an expense with a matching userId.
     * @allow (get, list) User can read their own expenses.
     * @allow (update, delete) User can update/delete their own existing expenses.
     * @deny All operations from other users.
     * @principle Enforces user-ownership and relational integrity.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's Categories.
     * @path /databases/{database}/documents/users/{userId}/categories/{categoryId}
     * @allow (create) User can create a category with a matching userId.
     * @allow (get, list) User can read their own categories.
     * @allow (update, delete) User can update/delete their own existing categories.
     * @deny All operations from other users.
     * @principle Enforces user-ownership and relational integrity.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's Budgets.
     * @path /databases/{database}/documents/users/{userId}/budgets/{budgetId}
     * @allow (create) User can create a budget with a matching userId.
     * @allow (get, list) User can read their own budgets.
     * @allow (update, delete) User can update/delete their own existing budgets.
     * @deny All operations from other users.
     * @principle Enforces user-ownership and relational integrity.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's Wishlist Items.
     * @path /databases/{database}/documents/users/{userId}/wishlist/{wishlistId}
     * @allow (create) User can create a wishlist item with a matching userId.
     * @allow (get, list) User can read their own wishlist items.
     * @allow (update, delete) User can update/delete their own existing wishlist items.
     * @deny All operations from other users.
     * @principle Enforces user-ownership and relational integrity.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's IOUs.
     * @path /databases/{database}/documents/users/{userId}/ious/{iouId}
     * @allow (create) User can create an IOU with a matching userId.
     * @allow (get, list) User can read their own IOUs.
     * @allow (update, delete) User can update/delete their own existing IOUs.
     * @deny All operations from other users.
     * @principle Enforces user-ownership and relational integrity.
     */
    match /users/{userId}/ious/{iouId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's Income.
     * @path /databases/{database}/documents/users/{userId}/income/{incomeId}
     * @allow (create) User can create an income record with a matching userId.
     * @allow (get, list) User can read their own income records.
     * @allow (update, delete) User can update/delete their own existing income records.
     * @deny All operations from other users.
     * @principle Enforces user-ownership and relational integrity.
     */
    match /users/{userId}/income/{incomeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}