/**
 * @file Firestore Security Rules for SpendWise
 * @version Prototyping
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 * @data_structure All data is nested under /users/{userId}, with subcollections for expenses, categories, budgets, wishlist items, IOUs, income, wallets, and achievements.
 * @key_security_decisions User listing is disallowed. The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure expense data for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user123' can create an expense.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own expenses.
     * @deny (create) - User with UID 'user456' cannot create an expense for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access expenses of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure expense categories created by a specific user.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) - User with UID 'user123' can create a category.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own categories.
     * @deny (create) - User with UID 'user456' cannot create a category for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access categories of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure budget information for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - User with UID 'user123' can create a budget.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own budgets.
     * @deny (create) - User with UID 'user456' cannot create a budget for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access budgets of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure wishlist items for a specific user.
     * @path /users/{userId}/wishlist/{wishlistId}
     * @allow (create) - User with UID 'user123' can create a wishlist item.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own wishlist items.
     * @deny (create) - User with UID 'user456' cannot create a wishlist item for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access wishlist items of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure IOUs for a specific user.
     * @path /users/{userId}/ious/{iouId}
     * @allow (create) - User with UID 'user123' can create an IOU.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own IOUs.
     * @deny (create) - User with UID 'user456' cannot create an IOU for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access IOUs of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ious/{iouId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure income data for a specific user.
     * @path /users/{userId}/income/{incomeId}
     * @allow (create) - User with UID 'user123' can create an income entry.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own income entries.
     * @deny (create) - User with UID 'user456' cannot create an income entry for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access income entries of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/income/{incomeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure E-Wallet information for a specific user.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) - User with UID 'user123' can create an E-Wallet.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own E-Wallets.
     * @deny (create) - User with UID 'user456' cannot create an E-Wallet for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access E-Wallets of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure achievements unlocked by a specific user.
     * @path /users/{userId}/achievements/{achievementId}
     * @allow (create) - User with UID 'user123' can create an achievement.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own achievements.
     * @deny (create) - User with UID 'user456' cannot create an achievement for user 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot access achievements of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/achievements/{achievementId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}