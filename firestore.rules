/**
 * @fileoverview Firestore Security Rules for SpendWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user
 * has complete control over their own data (profile, expenses, categories,
 * budgets, wishlist, IOUs, income, wallets and achievements). No data is
 * publicly accessible, and users cannot access each other's data.
 *
 * Data Structure:
 * All data is nested under the /users/{userId} collection, ensuring a clear
 * separation of user data.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - All write operations (create, update, delete) are strictly controlled by
 *   ownership checks.
 * - Read operations (get, list) are allowed only for the owner of the data.
 * - Data consistency between the path and document's internal fields is enforced
 *   on both create and update operations to maintain ownership.
 * - In this prototyping mode, data validation is relaxed to focus on
 *   authorization. Only critical fields for relational integrity are validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot get the profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure expenses. Only the user can read/write their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user123' can create an expense at /users/user123/expenses/expense1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get an expense at /users/user123/expenses/expense1.
     * @allow (update) - User with UID 'user123' can update an expense at /users/user123/expenses/expense1.
     * @allow (delete) - User with UID 'user123' can delete an expense at /users/user123/expenses/expense1.
     * @deny (create) - User with UID 'user456' cannot create an expense at /users/user123/expenses/expense1.
     * @deny (get) - User with UID 'user456' cannot get the expense at /users/user123/expenses/expense1.
     * @deny (update) - User with UID 'user456' cannot update the expense at /users/user123/expenses/expense1.
     * @deny (delete) - User with UID 'user456' cannot delete the expense at /users/user123/expenses/expense1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure categories. Only the user can read/write their own categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) - User with UID 'user123' can create a category at /users/user123/categories/category1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get a category at /users/user123/categories/category1.
     * @allow (update) - User with UID 'user123' can update a category at /users/user123/categories/category1.
     * @allow (delete) - User with UID 'user123' can delete a category at /users/user123/categories/category1.
     * @deny (create) - User with UID 'user456' cannot create a category at /users/user123/categories/category1.
     * @deny (get) - User with UID 'user456' cannot get the category at /users/user123/categories/category1.
     * @deny (update) - User with UID 'user456' cannot update the category at /users/user123/categories/category1.
     * @deny (delete) - User with UID 'user456' cannot delete the category at /users/user123/categories/category1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure budgets. Only the user can read/write their own budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - User with UID 'user123' can create a budget at /users/user123/budgets/budget1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get a budget at /users/user123/budgets/budget1.
     * @allow (update) - User with UID 'user123' can update a budget at /users/user123/budgets/budget1.
     * @allow (delete) - User with UID 'user123' can delete a budget at /users/user123/budgets/budget1.
     * @deny (create) - User with UID 'user456' cannot create a budget at /users/user123/budgets/budget1.
     * @deny (get) - User with UID 'user456' cannot get the budget at /users/user123/budgets/budget1.
     * @deny (update) - User with UID 'user456' cannot update the budget at /users/user123/budgets/budget1.
     * @deny (delete) - User with UID 'user456' cannot delete the budget at /users/user123/budgets/budget1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure wishlist items. Only the user can read/write their own wishlist items.
     * @path /users/{userId}/wishlist/{wishlistId}
     * @allow (create) - User with UID 'user123' can create a wishlist item at /users/user123/wishlist/item1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get a wishlist item at /users/user123/wishlist/item1.
     * @allow (update) - User with UID 'user123' can update a wishlist item at /users/user123/wishlist/item1.
     * @allow (delete) - User with UID 'user123' can delete a wishlist item at /users/user123/wishlist/item1.
     * @deny (create) - User with UID 'user456' cannot create a wishlist item at /users/user123/wishlist/item1.
     * @deny (get) - User with UID 'user456' cannot get the wishlist item at /users/user123/wishlist/item1.
     * @deny (update) - User with UID 'user456' cannot update the wishlist item at /users/user123/wishlist/item1.
     * @deny (delete) - User with UID 'user456' cannot delete the wishlist item at /users/user123/wishlist/item1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wishlist/{wishlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure IOUs. Only the user can read/write their own IOUs.
     * @path /users/{userId}/ious/{iouId}
     * @allow (create) - User with UID 'user123' can create an IOU at /users/user123/ious/iou1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get an IOU at /users/user123/ious/iou1.
     * @allow (update) - User with UID 'user123' can update an IOU at /users/user123/ious/iou1.
     * @allow (delete) - User with UID 'user123' can delete an IOU at /users/user123/ious/iou1.
     * @deny (create) - User with UID 'user456' cannot create an IOU at /users/user123/ious/iou1.
     * @deny (get) - User with UID 'user456' cannot get the IOU at /users/user123/ious/iou1.
     * @deny (update) - User with UID 'user456' cannot update the IOU at /users/user123/ious/iou1.
     * @deny (delete) - User with UID 'user456' cannot delete the IOU at /users/user123/ious/iou1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ious/{iouId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure income. Only the user can read/write their own income.
     * @path /users/{userId}/income/{incomeId}
     * @allow (create) - User with UID 'user123' can create an income entry at /users/user123/income/income1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get an income entry at /users/user123/income/income1.
     * @allow (update) - User with UID 'user123' can update an income entry at /users/user123/income/income1.
     * @allow (delete) - User with UID 'user123' can delete an income entry at /users/user123/income/income1.
     * @deny (create) - User with UID 'user456' cannot create an income entry at /users/user123/income/income1.
     * @deny (get) - User with UID 'user456' cannot get the income entry at /users/user123/income/income1.
     * @deny (update) - User with UID 'user456' cannot update the income entry at /users/user123/income/income1.
     * @deny (delete) - User with UID 'user456' cannot delete the income entry at /users/user123/income/income1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/income/{incomeId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure E-Wallets. Only the user can read/write their own E-Wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) - User with UID 'user123' can create a wallet at /users/user123/wallets/wallet1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get a wallet at /users/user123/wallets/wallet1.
     * @allow (update) - User with UID 'user123' can update a wallet at /users/user123/wallets/wallet1.
     * @allow (delete) - User with UID 'user123' can delete a wallet at /users/user123/wallets/wallet1.
     * @deny (create) - User with UID 'user456' cannot create a wallet at /users/user123/wallets/wallet1.
     * @deny (get) - User with UID 'user456' cannot get the wallet at /users/user123/wallets/wallet1.
     * @deny (update) - User with UID 'user456' cannot update the wallet at /users/user123/wallets/wallet1.
     * @deny (delete) - User with UID 'user456' cannot delete the wallet at /users/user123/wallets/wallet1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure achievements. Only the user can read/write their own achievements.
     * @path /users/{userId}/achievements/{achievementId}
     * @allow (create) - User with UID 'user123' can create an achievement at /users/user123/achievements/achievement1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can get an achievement at /users/user123/achievements/achievement1.
     * @allow (update) - User with UID 'user123' can update an achievement at /users/user123/achievements/achievement1.
     * @allow (delete) - User with UID 'user123' can delete an achievement at /users/user123/achievements/achievement1.
     * @deny (create) - User with UID 'user456' cannot create an achievement at /users/user123/achievements/achievement1.
     * @deny (get) - User with UID 'user456' cannot get the achievement at /users/user123/achievements/achievement1.
     * @deny (update) - User with UID 'user456' cannot update the achievement at /users/user123/achievements/achievement1.
     * @deny (delete) - User with UID 'user456' cannot delete the achievement at /users/user123/achievements/achievement1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/achievements/{achievementId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}